name:                psqueues
version:             0.2.8.0
license:             BSD3
license-file:        LICENSE
maintainer:          "Jasper Van der Jeugt <jaspervdj@gmail.com>"
synopsis:            "Pure priority search queues"
category:            "Data Structures"
github:              "jaspervdj/psqueues"
copyright:           "2024 Jasper Van der Jeugt"
build-type:          Simple
tested-with:
- GHC==9.6.1
- GHC==9.4.2
- GHC==9.2.2
- GHC==9.0.2
- GHC==8.10.7
- GHC==8.8.4
- GHC==8.6.5
- GHC==8.4.4
- GHC==8.2.2
- GHC==8.0.2

verbatim:
  cabal-version: ">=1.10"

description: |
  The psqueues package provides
  <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
  three different flavors.
  .
  * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
  deletion and lookup. This implementation is based on Ralf Hinze's
  <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
  Hence, it is similar to the
  <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
  considerably faster and provides a slightly different API.
  .
  * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
  to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
  (like @IntMap@) with an additional min-heap property.
  .
  * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
  simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
  hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
  this implementation is comparable to that of @IntPSQ@, but it is more widely
  applicable since the keys are not restricted to @Int@, but rather to any
  @Hashable@ datatype.
  .
  Each of the three implementations provides the same API, so they can be used
  interchangeably. The benchmarks show how they perform relative to one
  another, and also compared to the other Priority Search Queue
  implementations on Hackage:
  <http://hackage.haskell.org/package/PSQueue PSQueue>
  and
  <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
  .
  <<http://i.imgur.com/KmbDKR6.png>>
  .
  <<http://i.imgur.com/ClT181D.png>>
  .
  Typical applications of Priority Search Queues include:
  .
  * Caches, and more specifically LRU Caches;
  .
  * Schedulers;
  .
  * Pathfinding algorithms, such as Dijkstra's and A*.

extra-source-files:
- CHANGELOG

library:
  language:           Haskell2010
  ghc-options:
  - -O2
  - -Wall
  source-dirs:
  - src
  # exposed-modules:
  # - Data.PSQ.Class
  # - Data.HashPSQ
  # - Data.IntPSQ
  # - Data.OrdPSQ
  dependencies:
  - base >= 4.2 && < 5
  - deepseq >= 1.2 && < 1.6
  - hashable >= 1.1.2.3 && < 1.5
  when:
  - condition: impl(ghc>=6.10)
    dependencies:
    - ghc-prim

benchmarks:
  psqueues-benchmarks:
    language:           Haskell2010
    main:               Main.hs
    source-dirs:        benchmarks
    ghc-options:
    - -Wall
    generated-other-modules:
    - Paths_psqueues
    dependencies:
    - psqueues
    - containers >= 0.5
    - unordered-containers >= 0.2.4
    - criterion >= 0.8
    - mtl >= 2.1
    - PSQueue >= 1.1.0.1
    - random >= 1.0
    - base
    - deepseq
    - ghc-prim
    - hashable

tests:
  psqueues-tests:
    language:           Haskell2010
    main:               Main.hs
    source-dirs:        tests
    cpp-options:
    - -DTESTING
    - -DSTRICT
    ghc-options:
    - -Wall
    generated-other-modules:
    - Paths_psqueues
    dependencies:
    - psqueues
    - HUnit >= 1.2 && < 1.7
    - QuickCheck >= 2.7 && < 2.15
    - tasty >= 1.2 && < 1.6
    - tasty-hunit >= 0.9 && < 0.11
    - tasty-quickcheck >= 0.8 && < 0.11
    - base
    - array
    - deepseq
    - ghc-prim
    - hashable
    - tagged
