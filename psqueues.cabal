cabal-version: >=1.10

-- This file has been generated from package.yaml by hpack version 0.35.0.
--
-- see: https://github.com/sol/hpack

name:           psqueues
version:        0.2.8.0
synopsis:       Pure priority search queues
description:    The psqueues package provides
                <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
                three different flavors.
                .
                * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
                deletion and lookup. This implementation is based on Ralf Hinze's
                <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
                Hence, it is similar to the
                <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
                considerably faster and provides a slightly different API.
                .
                * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
                to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
                (like @IntMap@) with an additional min-heap property.
                .
                * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
                simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
                hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
                this implementation is comparable to that of @IntPSQ@, but it is more widely
                applicable since the keys are not restricted to @Int@, but rather to any
                @Hashable@ datatype.
                .
                Each of the three implementations provides the same API, so they can be used
                interchangeably. The benchmarks show how they perform relative to one
                another, and also compared to the other Priority Search Queue
                implementations on Hackage:
                <http://hackage.haskell.org/package/PSQueue PSQueue>
                and
                <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
                .
                <<http://i.imgur.com/KmbDKR6.png>>
                .
                <<http://i.imgur.com/ClT181D.png>>
                .
                Typical applications of Priority Search Queues include:
                .
                * Caches, and more specifically LRU Caches;
                .
                * Schedulers;
                .
                * Pathfinding algorithms, such as Dijkstra's and A*.
category:       Data Structures
homepage:       https://github.com/jaspervdj/psqueues#readme
bug-reports:    https://github.com/jaspervdj/psqueues/issues
maintainer:     Jasper Van der Jeugt <jaspervdj@gmail.com>
copyright:      2022 Leo Sin
license:        BSD3
license-file:   LICENSE
build-type:     Simple
tested-with:
    GHC==9.6.1
  , GHC==9.4.2
  , GHC==9.2.2
  , GHC==9.0.2
  , GHC==8.10.7
  , GHC==8.8.4
  , GHC==8.6.5
  , GHC==8.4.4
  , GHC==8.2.2
  , GHC==8.0.2
extra-source-files:
    CHANGELOG

source-repository head
  type: git
  location: https://github.com/jaspervdj/psqueues

library
  exposed-modules:
      Data.BitUtil
      Data.HashPSQ
      Data.HashPSQ.Internal
      Data.IntPSQ
      Data.IntPSQ.Internal
      Data.OrdPSQ
      Data.OrdPSQ.Internal
      Data.PSQ
      Data.PSQ.Class
  other-modules:
      Paths_psqueues
  hs-source-dirs:
      src
  ghc-options: -O2 -Wall
  build-depends:
      base >=4.2 && <5
    , deepseq >=1.2 && <1.6
    , hashable >=1.1.2.3 && <1.6
  default-language: Haskell2010
  if impl(ghc>=6.10)
    build-depends:
        ghc-prim

test-suite psqueues-tests
  type: exitcode-stdio-1.0
  main-is: Main.hs
  other-modules:
      Data.HashPSQ.Tests
      Data.IntPSQ.Tests
      Data.OrdPSQ.Tests
      Data.PSQ.Class.Gen
      Data.PSQ.Class.Tests
      Data.PSQ.Class.Util
      Paths_psqueues
  autogen-modules:
      Paths_psqueues
  hs-source-dirs:
      tests
  ghc-options: -Wall
  cpp-options: -DTESTING -DSTRICT
  build-depends:
      HUnit >=1.2 && <1.7
    , QuickCheck >=2.7 && <2.15
    , array
    , base
    , deepseq
    , ghc-prim
    , hashable
    , psqueues
    , tagged
    , tasty >=1.2 && <1.6
    , tasty-hunit >=0.9 && <0.11
    , tasty-quickcheck >=0.8 && <0.11
  default-language: Haskell2010

benchmark psqueues-benchmarks
  type: exitcode-stdio-1.0
  main-is: Main.hs
  other-modules:
      BenchmarkTypes
      Data.HashPSQ.Benchmark
      Data.IntPSQ.Benchmark
      Data.OrdPSQ.Benchmark
      Data.PSQueue.Benchmark
      Paths_psqueues
  autogen-modules:
      Paths_psqueues
  hs-source-dirs:
      benchmarks
  ghc-options: -Wall
  build-depends:
      PSQueue >=1.1
    , base
    , containers >=0.5
    , criterion >=0.8
    , deepseq
    , ghc-prim
    , hashable
    , mtl >=2.1
    , psqueues
    , random >=1.0
    , unordered-containers >=0.2.4
  default-language: Haskell2010
